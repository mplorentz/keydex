// Mocks generated by Mockito 5.4.4 from annotations
// in keydex/test/contract/lockbox_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:keydex/contracts/lockbox_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLockboxContent_0 extends _i1.SmartFake
    implements _i2.LockboxContent {
  _FakeLockboxContent_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LockboxService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockboxService extends _i1.Mock implements _i2.LockboxService {
  MockLockboxService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> createLockbox({
    required String? name,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createLockbox,
          [],
          {
            #name: name,
            #content: content,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #createLockbox,
            [],
            {
              #name: name,
              #content: content,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<_i2.LockboxMetadata>> getAllLockboxes() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllLockboxes,
          [],
        ),
        returnValue: _i3.Future<List<_i2.LockboxMetadata>>.value(
            <_i2.LockboxMetadata>[]),
      ) as _i3.Future<List<_i2.LockboxMetadata>>);

  @override
  _i3.Future<_i2.LockboxContent> getLockboxContent(String? lockboxId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLockboxContent,
          [lockboxId],
        ),
        returnValue: _i3.Future<_i2.LockboxContent>.value(_FakeLockboxContent_0(
          this,
          Invocation.method(
            #getLockboxContent,
            [lockboxId],
          ),
        )),
      ) as _i3.Future<_i2.LockboxContent>);

  @override
  _i3.Future<void> updateLockbox({
    required String? lockboxId,
    required String? content,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLockbox,
          [],
          {
            #lockboxId: lockboxId,
            #content: content,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateLockboxName({
    required String? lockboxId,
    required String? name,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateLockboxName,
          [],
          {
            #lockboxId: lockboxId,
            #name: name,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteLockbox(String? lockboxId) => (super.noSuchMethod(
        Invocation.method(
          #deleteLockbox,
          [lockboxId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> authenticateUser() => (super.noSuchMethod(
        Invocation.method(
          #authenticateUser,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
