// Mocks generated by Mockito
import 'package:local_auth/local_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

/// A class which mocks [LocalAuthentication].
class MockLocalAuthentication extends _i1.Mock implements _i2.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<bool> authenticate({
    required String? localizedReason,
    _i2.AuthenticationOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(#authenticate, [], {
          #localizedReason: localizedReason,
          #options: options,
        }),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> get canCheckBiometrics => (super.noSuchMethod(
        Invocation.getter(#canCheckBiometrics),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<List<_i2.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(#getAvailableBiometrics, []),
        returnValue: Future<List<_i2.BiometricType>>.value(<_i2.BiometricType>[]),
      ) as Future<List<_i2.BiometricType>>);

  @override
  Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(#isDeviceSupported, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> stopAuthentication() => (super.noSuchMethod(
        Invocation.method(#stopAuthentication, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);
}

/// A class which mocks [SharedPreferences].
class MockSharedPreferences extends _i1.Mock implements _i3.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
        Invocation.method(#setBool, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
        Invocation.method(#setDouble, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
        Invocation.method(#setInt, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
        Invocation.method(#setString, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
        Invocation.method(#setStringList, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(#getBool, [key]),
      ) as bool?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(#getDouble, [key]),
      ) as double?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(#getInt, [key]),
      ) as int?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(#getString, [key]),
      ) as String?);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(#getStringList, [key]),
      ) as List<String>?);

  @override
  Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(#remove, [key]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<void> reload() => (super.noSuchMethod(
        Invocation.method(#reload, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(#getKeys, []),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(#containsKey, [key]),
        returnValue: false,
      ) as bool);
}