// Mocks generated by Mockito
import 'package:keydex/contracts/auth_service.dart' as _i2;
import 'package:keydex/contracts/encryption_service.dart' as _i3;
import 'package:keydex/models/lockbox.dart' as _i5;
import 'package:keydex/services/storage_service.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ndk/shared/nips/nip01/key_pair.dart' as _i6;

/// A class which mocks [AuthService].
class MockAuthService extends _i1.Mock implements _i2.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<bool> authenticateUser() => (super.noSuchMethod(
        Invocation.method(#authenticateUser, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> isBiometricAvailable() => (super.noSuchMethod(
        Invocation.method(#isBiometricAvailable, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> isAuthenticationConfigured() => (super.noSuchMethod(
        Invocation.method(#isAuthenticationConfigured, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<void> setupAuthentication() => (super.noSuchMethod(
        Invocation.method(#setupAuthentication, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> disableAuthentication() => (super.noSuchMethod(
        Invocation.method(#disableAuthentication, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);
}

/// A class which mocks [EncryptionService].
class MockEncryptionService extends _i1.Mock implements _i3.EncryptionService {
  MockEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<String> encryptText(String? plaintext) => (super.noSuchMethod(
        Invocation.method(#encryptText, [plaintext]),
        returnValue: Future<String>.value(''),
      ) as Future<String>);

  @override
  Future<String> decryptText(String? encryptedText) => (super.noSuchMethod(
        Invocation.method(#decryptText, [encryptedText]),
        returnValue: Future<String>.value(''),
      ) as Future<String>);

  @override
  Future<_i6.KeyPair> generateKeyPair() => (super.noSuchMethod(
        Invocation.method(#generateKeyPair, []),
        returnValue: Future<_i6.KeyPair>.value(_i6.KeyPair()),
      ) as Future<_i6.KeyPair>);

  @override
  Future<bool> validateKeyPair(_i6.KeyPair? keyPair) => (super.noSuchMethod(
        Invocation.method(#validateKeyPair, [keyPair]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<_i6.KeyPair?> getCurrentKeyPair() => (super.noSuchMethod(
        Invocation.method(#getCurrentKeyPair, []),
        returnValue: Future<_i6.KeyPair?>.value(),
      ) as Future<_i6.KeyPair?>);

  @override
  Future<void> setKeyPair(_i6.KeyPair? keyPair) => (super.noSuchMethod(
        Invocation.method(#setKeyPair, [keyPair]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);
}

/// A class which mocks [StorageService].
class MockStorageService extends _i1.Mock implements _i4.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<void> storeLockboxes(List<_i5.LockboxMetadata>? lockboxes) =>
      (super.noSuchMethod(
        Invocation.method(#storeLockboxes, [lockboxes]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<List<_i5.LockboxMetadata>> getLockboxes() => (super.noSuchMethod(
        Invocation.method(#getLockboxes, []),
        returnValue: Future<List<_i5.LockboxMetadata>>.value(<_i5.LockboxMetadata>[]),
      ) as Future<List<_i5.LockboxMetadata>>);

  @override
  Future<void> storeLockboxContent(String? lockboxId, String? encryptedContent) =>
      (super.noSuchMethod(
        Invocation.method(#storeLockboxContent, [lockboxId, encryptedContent]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<String?> getLockboxContent(String? lockboxId) => (super.noSuchMethod(
        Invocation.method(#getLockboxContent, [lockboxId]),
        returnValue: Future<String?>.value(),
      ) as Future<String?>);

  @override
  Future<void> removeLockbox(String? lockboxId) => (super.noSuchMethod(
        Invocation.method(#removeLockbox, [lockboxId]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> updateLockbox(_i5.LockboxMetadata? updatedLockbox) =>
      (super.noSuchMethod(
        Invocation.method(#updateLockbox, [updatedLockbox]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> addLockbox(_i5.LockboxMetadata? lockbox) => (super.noSuchMethod(
        Invocation.method(#addLockbox, [lockbox]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> storeUserPreferences(Map<String, dynamic>? preferences) =>
      (super.noSuchMethod(
        Invocation.method(#storeUserPreferences, [preferences]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<Map<String, dynamic>> getUserPreferences() => (super.noSuchMethod(
        Invocation.method(#getUserPreferences, []),
        returnValue: Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as Future<Map<String, dynamic>>);

  @override
  Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(#clearAll, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<_i4.StorageStats> getStorageStats() => (super.noSuchMethod(
        Invocation.method(#getStorageStats, []),
        returnValue: Future<_i4.StorageStats>.value(
          const _i4.StorageStats(
            totalLockboxes: 0,
            totalContentSize: 0,
            averageLockboxSize: 0.0,
          ),
        ),
      ) as Future<_i4.StorageStats>);
}