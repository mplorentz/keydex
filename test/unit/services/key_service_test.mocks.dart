// Mocks generated by Mockito
import 'package:keydex/contracts/encryption_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ndk/shared/nips/nip01/key_pair.dart' as _i4;
import 'package:shared_preferences/shared_preferences.dart' as _i3;

/// A class which mocks [EncryptionService].
class MockEncryptionService extends _i1.Mock implements _i2.EncryptionService {
  MockEncryptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<String> encryptText(String? plaintext) => (super.noSuchMethod(
        Invocation.method(#encryptText, [plaintext]),
        returnValue: Future<String>.value(''),
      ) as Future<String>);

  @override
  Future<String> decryptText(String? encryptedText) => (super.noSuchMethod(
        Invocation.method(#decryptText, [encryptedText]),
        returnValue: Future<String>.value(''),
      ) as Future<String>);

  @override
  Future<_i4.KeyPair> generateKeyPair() => (super.noSuchMethod(
        Invocation.method(#generateKeyPair, []),
        returnValue: Future<_i4.KeyPair>.value(_i4.KeyPair()),
      ) as Future<_i4.KeyPair>);

  @override
  Future<bool> validateKeyPair(_i4.KeyPair? keyPair) => (super.noSuchMethod(
        Invocation.method(#validateKeyPair, [keyPair]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<_i4.KeyPair?> getCurrentKeyPair() => (super.noSuchMethod(
        Invocation.method(#getCurrentKeyPair, []),
        returnValue: Future<_i4.KeyPair?>.value(),
      ) as Future<_i4.KeyPair?>);

  @override
  Future<void> setKeyPair(_i4.KeyPair? keyPair) => (super.noSuchMethod(
        Invocation.method(#setKeyPair, [keyPair]),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  Future<void> clearKeyPair() => (super.noSuchMethod(
        Invocation.method(#clearKeyPair, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);
}

/// A class which mocks [SharedPreferences].
class MockSharedPreferences extends _i1.Mock implements _i3.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Future<bool> setBool(String? key, bool? value) =>
      (super.noSuchMethod(
        Invocation.method(#setBool, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setDouble(String? key, double? value) =>
      (super.noSuchMethod(
        Invocation.method(#setDouble, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setInt(String? key, int? value) =>
      (super.noSuchMethod(
        Invocation.method(#setInt, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setString(String? key, String? value) =>
      (super.noSuchMethod(
        Invocation.method(#setString, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> setStringList(String? key, List<String>? value) =>
      (super.noSuchMethod(
        Invocation.method(#setStringList, [key, value]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(#getBool, [key]),
      ) as bool?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(#getDouble, [key]),
      ) as double?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(#getInt, [key]),
      ) as int?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(#getString, [key]),
      ) as String?);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(#getStringList, [key]),
      ) as List<String>?);

  @override
  Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(#remove, [key]),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(#clear, []),
        returnValue: Future<bool>.value(false),
      ) as Future<bool>);

  @override
  Future<void> reload() => (super.noSuchMethod(
        Invocation.method(#reload, []),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(#getKeys, []),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(#containsKey, [key]),
        returnValue: false,
      ) as bool);
}